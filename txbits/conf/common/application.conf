# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!

play.crypto.secret="_W=?ewZw8<5vZxlSB1b<?9qR0Fv2/3TeM0R>NqTwG?hoWCZXR[`T[2IJ]oFJ/Fnt"

#in dev we don't use a reverse proxy
reverseproxy=false

# wallet actor configuration

wallet {
  bitcoin {
    enabled=false
    node.ids=[0]
    node.0 {
      rpc {
        url="http://127.0.0.1:8332/"
        user="user"
        password="pass123"
      }
      # times are in seconds
      checkDelay=20
      checkInterval=600
      addressDelay=0
      addressInterval=7200
      # increase this value in production
      # must be less than keypool to allow for change addresses
      addressPool=60
      coldAddress="myMmBUBrPG39r5oUmWdVwJWTQskoxQhjYT"
      refillEmail="wallet@txbits.com"
      # should match maxtxfee in bitcoin.conf
      maxTxFee="0.01000000"
    }
  }
  litecoin {
    enabled=false
    node.ids=[0]
    node.0 {
      rpc {
        url="http://127.0.0.1:9332/"
        user="user"
        password="pass123"
      }
      # times are in seconds
      checkDelay=20
      checkInterval=150
      addressDelay=0
      addressInterval=7200
      # increase this value in production
      # must be less than keypool to allow for change addresses
      addressPool=60
      coldAddress="mzTv2hc1AmrfH3PL9Ur9iL79C683zmByKA"
      refillEmail="wallet@txbits.com"
      # should match maxtxfee in litecoin.conf
      maxTxFee="0.10000000"
    }
  }
}

# configure play's global actor system
akka.default-dispatcher.fork-join-executor.pool-size-max = 64
akka.actor.debug.receive = on
akka.actor.debug.unhandled = on

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
}

akka {
  fork-join-executor {
    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 10.0

    parallelism-min = 8
    parallelism-max = 300

    # Setting this to LIFO changes the fork-join-executor
    # to use a stack discipline for task scheduling. This usually
    # improves throughput at the cost of possibly increasing
    # latency and risking task starvation (which should be rare).
    task-peeking-mode = LIFO
  }
}


# security headers
play.filters.headers.contentSecurityPolicy="default-src 'self' data: https://www.google-analytics.com https://*.uservoice.com; script-src 'self' 'unsafe-eval' https://www.google-analytics.com https://*.uservoice.com; style-src 'self' data: 'unsafe-inline'; font-src 'self' data:"

# The application languages
# ~~~~~
play.i18n.langs=["en", "fr", "ru"]
application.name="TxBits"

email.security="security@txbits.com"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Used when applying database updates in production
meta.exitimmediately=false

# Evolutions
# ~~~~~
# "If your application is running on several hosts, you must set the config property" - http://www.playframework.com/documentation/2.2.x/Evolutions
play.evolutions.useLocks=false

include "securesocial.conf"
